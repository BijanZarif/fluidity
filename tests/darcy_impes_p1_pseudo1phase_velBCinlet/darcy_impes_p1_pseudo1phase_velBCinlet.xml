<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>darcy_impes_p1_pseudo1phase_velBCinlet</name>
  <owner userid="btollit"/>
  <tags>diml</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
../../bin/darcy_impes darcy_impes_p1_pseudo1phase_velBCinlet_1d.diml 
../../bin/darcy_impes darcy_impes_p1_pseudo1phase_velBCinlet_2d.diml 
../../bin/darcy_impes darcy_impes_p1_pseudo1phase_velBCinlet_3d.diml 
    </command_line>
    <!-- One/two/three dimensional problem for darcy flow using the IMPES solver with one region testing the pressure gradient as well as pressure min and max against analytic using 2 phases to test a 1 phase problem. This problem uses a darcy velocity BC at the intlet. -->
  </problem_definition>
  <variables>
    <variable name="pressure_1d" language="python">
import vtktools
v = vtktools.vtu("darcy_impes_p1_pseudo1phase_velBCinlet_1d_1.vtu")
pressure_1d = v.GetScalarRange("Phase1::Pressure")
    </variable>
    <variable name="pressure_2d" language="python">
import vtktools
v = vtktools.vtu("darcy_impes_p1_pseudo1phase_velBCinlet_2d_1.vtu")
pressure_2d = v.GetScalarRange("Phase1::Pressure")
    </variable>
    <variable name="pressure_3d" language="python">
import vtktools
v = vtktools.vtu("darcy_impes_p1_pseudo1phase_velBCinlet_3d_1.vtu")
pressure_3d = v.GetScalarRange("Phase1::Pressure")
    </variable>
    <variable name="phase1_sat_max_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
phase1_sat_max_1d = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_min_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
phase1_sat_min_1d = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_max_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
phase2_sat_max_1d = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_min_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
phase2_sat_min_1d = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_max_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
sum_sat_max_1d = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_min_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
sum_sat_min_1d = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_integral_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
sum_sat_integral_1d = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
        
    <variable name="phase1_sat_max_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
phase1_sat_max_2d = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_min_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
phase1_sat_min_2d = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_max_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
phase2_sat_max_2d = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_min_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
phase2_sat_min_2d = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_max_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
sum_sat_max_2d = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_min_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
sum_sat_min_2d = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_integral_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
sum_sat_integral_2d = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    
    <variable name="phase1_sat_max_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
phase1_sat_max_3d = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_min_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
phase1_sat_min_3d = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_max_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
phase2_sat_max_3d = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_min_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
phase2_sat_min_3d = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_max_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
sum_sat_max_3d = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_min_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
sum_sat_min_3d = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_integral_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
sum_sat_integral_3d = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    
    <variable name="phase1_v_mag_max_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
phase1_v_mag_max_1d = s["Phase1"]["DarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="phase2_v_mag_max_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
phase2_v_mag_max_1d = s["Phase2"]["DarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="v_tot_mag_max_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
v_tot_mag_max_1d = s["Phase1"]["TotalDarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="phase1_v_mag_max_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
phase1_v_mag_max_2d = s["Phase1"]["DarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="phase2_v_mag_max_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
phase2_v_mag_max_2d = s["Phase2"]["DarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="v_tot_mag_max_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
v_tot_mag_max_2d = s["Phase1"]["TotalDarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="phase1_v_mag_max_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
phase1_v_mag_max_3d = s["Phase1"]["DarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="phase2_v_mag_max_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
phase2_v_mag_max_3d = s["Phase2"]["DarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="v_tot_mag_max_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
v_tot_mag_max_3d = s["Phase1"]["TotalDarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="phase1_mob_max_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
phase1_mob_max_1d = s["Phase1"]["Mobility"]["max"][-1]
    </variable>    
    <variable name="phase2_mob_max_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
phase2_mob_max_1d = s["Phase2"]["Mobility"]["max"][-1]
    </variable>    
    <variable name="mob_tot_max_1d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_1d.stat")
mob_tot_max_1d = s["Phase1"]["TotalMobility"]["max"][-1]
    </variable>    
    <variable name="phase1_mob_max_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
phase1_mob_max_2d = s["Phase1"]["Mobility"]["max"][-1]
    </variable>    
    <variable name="phase2_mob_max_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
phase2_mob_max_2d = s["Phase2"]["Mobility"]["max"][-1]
    </variable>    
    <variable name="mob_tot_max_2d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_2d.stat")
mob_tot_max_2d = s["Phase1"]["TotalMobility"]["max"][-1]
    </variable>    
    <variable name="phase1_mob_max_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
phase1_mob_max_3d = s["Phase1"]["Mobility"]["max"][-1]
    </variable>    
    <variable name="phase2_mob_max_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
phase2_mob_max_3d = s["Phase2"]["Mobility"]["max"][-1]
    </variable>    
    <variable name="mob_tot_max_3d" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_pseudo1phase_velBCinlet_3d.stat")
mob_tot_max_3d = s["Phase1"]["TotalMobility"]["max"][-1]
    </variable>        
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
    
    <!-- analytical comparisons, 1st order, 1D thru 3D (pressure) -->
    <test name="change_P for 1d should equal domain_length*visc*darcy_vel_BC/perm, check relative difference to be under tolerance 1.0e-09" language="python">
change_P = abs(max(pressure_1d) - min(pressure_1d))
visc = 1.0e-04
darcy_vel_BC = 5.0
perm = 1.0e-10
domain_length = 300.0
print 'Relative error of pressure difference: ',abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm))
assert abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm)) &lt; 1.0e-09
    </test>
    <test name="change_P for 2d should equal domain_length*visc*darcy_vel_BC/perm, check relative difference to be under tolerance 1.0e-09" language="python">
change_P = abs(max(pressure_2d) - min(pressure_2d))
visc = 1.0e-04
darcy_vel_BC = 5.0
perm = 1.0e-10
domain_length = 300.0
print 'Relative error of pressure difference: ',abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm))
assert abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm)) &lt; 1.0e-09
    </test>
    <test name="change_P for 3d should equal domain_length*visc*darcy_vel_BC/perm, check relative difference to be under tolerance 1.0e-09" language="python">
change_P = abs(max(pressure_3d) - min(pressure_3d))
visc = 1.0e-04
darcy_vel_BC = 5.0
perm = 1.0e-10
domain_length = 300.0
print 'Relative error of pressure difference: ',abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm))
assert abs((change_P - domain_length*visc*darcy_vel_BC/perm)/(domain_length*visc*darcy_vel_BC/perm)) &lt; 1.0e-09
    </test>

    <!-- basic comparisons, 1st order, 1D thru 3D (pressure) -->
    <test name="max_P for 1d should equal 1.5e+09, check relative difference to be under tolerance 1.0e-09" language="python">
print 'Relative error of pressure max ',abs((max(pressure_1d) - 1.5e+09)/1.5e+09)
assert abs((max(pressure_1d) - 1.5e+09)/1.5e+09) &lt; 1.0e-09
    </test>
    <test name="max_P for 2d should equal 1.5e+09, check relative difference to be under tolerance 1.0e-09" language="python">
print 'Relative error of pressure max ',abs((max(pressure_2d) - 1.5e+09)/1.5e+09)
assert abs((max(pressure_2d) - 1.5e+09)/1.5e+09) &lt; 1.0e-09
    </test>
    <test name="max_P for 3d should equal 1.5e+09, check relative difference to be under tolerance 1.0e-09" language="python">
print 'Relative error of pressure max ',abs((max(pressure_3d) - 1.5e+09)/1.5e+09)
assert abs((max(pressure_3d) - 1.5e+09)/1.5e+09) &lt; 1.0e-09
    </test>
    <test name="min_P for 1d should equal 0.0, check absolute difference to be under tolerance 1.0e-09" language="python">
print 'Absolute error of pressure min ',abs(min(pressure_1d))
assert abs(min(pressure_1d)) &lt; 1.0e-09
    </test>
    <test name="min_P for 2d should equal 0.0, check relative difference to be under tolerance 1.0e-09" language="python">
print 'Absolute error of pressure min ',abs(min(pressure_2d))
assert abs(min(pressure_2d)) &lt; 1.0e-09
    </test>
    <test name="min_P for 3d should equal 0.0, check relative difference to be under tolerance 1.0e-09" language="python">
print 'Absolute error of pressure min ',abs(min(pressure_3d))
assert abs(min(pressure_3d)) &lt; 1.0e-09
    </test>

    <!-- basic comparisons, 1st order, 1D -->
    <test name="phase 1 for 1d has max(sat) equals 1.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_max_1d - 1.0) &lt; 1.0e-08
    </test>
    <test name="phase 1 for 1d has min(sat) equals 1.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_min_1d - 1.0) &lt; 1.0e-08
    </test>
    <test name="phase 2 for 1d has max(sat) equals 0.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_max_1d) &lt; 1.0e-08
    </test>
    <test name="phase 2 for 1d has min(sat) equals 0.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_min_1d) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_max for 1d is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_max_1d - 1.0)
assert abs(sum_sat_max_1d - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min for 1d is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_min_1d - 1.0)
assert abs(sum_sat_min_1d - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral for 1d is 3.0e+02 with relative tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_integral_1d - 3.0e+02)/3.0e+02
assert abs(sum_sat_integral_1d - 3.0e+02)/3.0e+02 &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 2D -->
    <test name="phase 1 for 2d has max(sat) equals 1.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_max_2d - 1.0) &lt; 1.0e-08
    </test>
    <test name="phase 1 for 2d has min(sat) equals 1.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_min_2d - 1.0) &lt; 1.0e-08
    </test>
    <test name="phase 2 for 2d has max(sat) equals 0.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_max_2d) &lt; 1.0e-08
    </test>
    <test name="phase 2 for 2d has min(sat) equals 0.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_min_2d) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_max for 2d is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_max_2d - 1.0)
assert abs(sum_sat_max_2d - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min for 2d is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_min_2d - 1.0)
assert abs(sum_sat_min_2d - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral for 2d is 9.0e+04 with relative tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_integral_2d - 9.0e+04)/9.0e+04
assert abs(sum_sat_integral_2d - 9.0e+04)/9.0e+04 &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 3D -->
    <test name="phase 1 for 3d has max(sat) equals 1.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_max_3d - 1.0) &lt; 1.0e-08
    </test>
    <test name="phase 1 for 3d has min(sat) equals 1.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_min_3d - 1.0) &lt; 1.0e-08
    </test>
    <test name="phase 2 for 3d has max(sat) equals 0.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_max_3d) &lt; 1.0e-08
    </test>
    <test name="phase 2 for 3d has min(sat) equals 0.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_min_3d) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_max for 3d is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_max_3d - 1.0)
assert abs(sum_sat_max_3d - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min for 3d is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_min_3d - 1.0)
assert abs(sum_sat_min_3d - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral for 3d is 2.7e+07 with relative tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_integral_3d - 2.7e+07)/2.7e+07
assert abs(sum_sat_integral_3d - 2.7e+07)/2.7e+07 &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 1D (velocity) -->
    <test name="Check phase1_v_mag_max_1d equals 5.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_v_mag_max_1d - 5.0) &lt; 1.0e-08
    </test>
    <test name="Check phase2_v_mag_max_1d equals 5.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_v_mag_max_1d - 5.0) &lt; 1.0e-08
    </test>
    <test name="Check v_tot_mag_max_1d equals 10.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_max_1d - 10.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 2D (velocity) -->
    <test name="Check phase1_v_mag_max_2d equals 5.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_v_mag_max_2d - 5.0) &lt; 1.0e-08
    </test>
    <test name="Check phase2_v_mag_max_2d equals 5.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_v_mag_max_2d - 5.0) &lt; 1.0e-08
    </test>
    <test name="Check v_tot_mag_max_2d equals 10.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_max_2d - 10.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 3D (velocity) -->
    <test name="Check phase1_v_mag_max_3d equals 5.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_v_mag_max_3d - 5.0) &lt; 1.0e-08
    </test>
    <test name="Check phase2_v_mag_max_3d equals 5.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_v_mag_max_3d - 5.0) &lt; 1.0e-08
    </test>
    <test name="Check v_tot_mag_max_3d equals 10.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_max_3d - 10.0) &lt; 1.0e-08
    </test>

    <!-- basic comparisons, 1st order, 1D (mobility) -->
    <test name="Check phase1_mob_max_1d equals 10000.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_mob_max_1d - 10000.0) &lt; 1.0e-08
    </test>
    <test name="Check phase2_mob_max_1d equals 10000.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_mob_max_1d - 10000.0) &lt; 1.0e-08
    </test>
    <test name="Check mob_tot_max_1d equals 20000.0 with tolerance 1.0e-08" language="python">
assert abs(mob_tot_max_1d - 20000.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 2D (mobility) -->
    <test name="Check phase1_mob_max_2d equals 10000.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_mob_max_2d - 10000.0) &lt; 1.0e-08
    </test>
    <test name="Check phase2_mob_max_2d equals 10000.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_mob_max_2d - 10000.0) &lt; 1.0e-08
    </test>
    <test name="Check mob_tot_max_2d equals 20000.0 with tolerance 1.0e-08" language="python">
assert abs(mob_tot_max_2d - 20000.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 3D (mobility) -->
    <test name="Check phase1_mob_max_3d equals 10000.0 with tolerance 1.0e-08" language="python">
assert abs(phase1_mob_max_3d - 10000.0) &lt; 1.0e-08
    </test>
    <test name="Check phase2_mob_max_3d equals 10000.0 with tolerance 1.0e-08" language="python">
assert abs(phase2_mob_max_3d - 10000.0) &lt; 1.0e-08
    </test>
    <test name="Check mob_tot_max_3d equals 20000.0 with tolerance 1.0e-08" language="python">
assert abs(mob_tot_max_3d - 20000.0) &lt; 1.0e-08
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
