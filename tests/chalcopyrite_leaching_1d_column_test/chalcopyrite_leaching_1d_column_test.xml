<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>chalcopyrite_leaching_1d_column_test</name>
  <owner userid="LCai"/>
  <tags>diml leaching</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>make input;
darcy_impes chalcopyrite_leaching_1d_column_test.diml;</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files</variable>
    <variable name="data" language="python">import fluidity.diagnostics.fluiditytools as fluidity_tools
import numpy

rst = fluidity_tools.stat_parser('./chalcopyrite_leaching_1d_column_test.stat')

#compare the extraction of CuFeS2 with experiment data at day 1
ex_CuFeS2=(rst['Phase1']['chal_current_extraction'][u'max']+rst['Phase1']['chal_current_extraction'][u'min'])/2.0
Er_CuFeS2=ex_CuFeS2[-1]-0.1609809225

#compare pyrite extraction
ex_FeS2=(rst['Phase1']['pyri_current_extraction'][u'max']+rst['Phase1']['pyri_current_extraction'][u'min'])/2.0
Er_FeS2=ex_FeS2[-1]-0.0040100559995582255
ext={'CuFeS2':Er_CuFeS2, 'FeS2':Er_FeS2}

#compare the species concentration
og=rst['Phase1']['Og'][u'l2norm'][-1]
H=rst['Phase2']['H'][u'l2norm'][-1]
Fe3=rst['Phase2']['Fe3'][u'l2norm'][-1]
Cu=rst['Phase2']['Cu'][u'l2norm'][-1]
Fe2=rst['Phase2']['Fe2'][u'l2norm'][-1]
DO=rst['Phase2']['DO'][u'l2norm'][-1]
S0=rst['Phase1']['sulf_S0'][u'l2norm'][-1]
jaro=rst['Phase1']['Jarosite_molar_concentration'][u'l2norm'][-1]

con={'og':og, 'H':H, 'Fe3':Fe3, 'Cu':Cu, 'Fe2':Fe2, 'DO':DO, 'S0':S0, 'jaro':jaro}
#compare the reaction rate
dCuFeS2=rst['Phase1']['chal_dCuFeS2_dt'][u'l2norm']
dFeS2=rst['Phase1']['pyri_dFeS2_dt'][u'l2norm']
dS0=rst['Phase1']['sulf_dS0_dt'][u'l2norm']
dFe2=rst['Phase1']['feox_dFe2_dt'][u'l2norm']
dOg=rst['Phase1']['oxdi_dOg_dt'][u'l2norm']
dJ=rst['Phase1']['Jarosite_dM_dt'][u'l2norm']

#numerical integration by Trapezoidal rule
dth=rst['dt'][u'value'][0]/2.0
lent=len(rst['dt'][u'value'])

dcfs=dth*(dCuFeS2[0]+2.0*sum(dCuFeS2[1:(lent-1)])+dCuFeS2[lent-1])
dfs=dth*(dFeS2[0]+2.0*sum(dFeS2[1:(lent-1)])+dFeS2[lent-1])
ds=dth*(dS0[0]+2.0*sum(dS0[1:(lent-1)])+dS0[lent-1])
df2=dth*(dFe2[0]+2.0*sum(dFe2[1:(lent-1)])+dFe2[lent-1])
do=dth*(dOg[0]+2.0*sum(dOg[1:(lent-1)])+dOg[lent-1])
djr=dth*(dJ[0]+2.0*sum(dJ[1:(lent-1)])+dJ[lent-1])

intg={'dcfs':dcfs, 'dfs':dfs, 'ds':ds, 'df2':df2, 'do':do, 'djr':djr}

data={'ext':ext, 'con':con, 'intg': intg}</variable>
  </variables>
  <pass_tests>
    <test name="Solvers_converged" language="python">assert(solvers_converged)</test>
    <test name="Bound" language="python">import fluidity_tools

fluidity_tools.compare_variable(-0.016900949678504223,data['ext']['CuFeS2'], 1.0e-12)
fluidity_tools.compare_variable(-1.0721532960923652e-08,data['ext']['FeS2'], 1.0e-12)
fluidity_tools.compare_variable(3.2241958439073941,data['con']['og'], 1.0e-12)
fluidity_tools.compare_variable(29.852971837883615,data['con']['H'], 1.0e-12)
fluidity_tools.compare_variable(35.36689396949118,data['con']['Fe3'], 1.0e-12)
fluidity_tools.compare_variable(2.7107074745949005,data['con']['Cu'], 1.0e-12)
fluidity_tools.compare_variable(3.7415220212422771,data['con']['Fe2'], 1.0e-12)
fluidity_tools.compare_variable(0.076334595023458213,data['con']['DO'], 1.0e-12)
fluidity_tools.compare_variable(0.57185371349065361,data['con']['S0'], 1.0e-12)
fluidity_tools.compare_variable(0.0020945636823019496,data['con']['jaro'], 1.0e-12)</test>
    <test name="Integration_error" language="python">import fluidity_tools

fluidity_tools.compare_variable(9.4668593610399583,data['intg']['dcfs'], 1.0e-12)
fluidity_tools.compare_variable(1.3019717019166706,data['intg']['dfs'], 1.0e-12)
fluidity_tools.compare_variable(1.8138938666843061,data['intg']['ds'], 1.0e-12)
fluidity_tools.compare_variable(0.0001419660084968549,data['intg']['df2'], 1.0e-12)
fluidity_tools.compare_variable(76.627904579406092,data['intg']['do'], 1.0e-12)
fluidity_tools.compare_variable(0.18864549245662132,data['intg']['djr'], 1.0e-12)</test>
  </pass_tests>
</testproblem>
